/*--------------------------------*- C++ -*----------------------------------*\
|                                                                             |
|                Generated by the CfdOF workbench for FreeCAD                 |
|                      https://github.com/jaheyns/CfdOF                       |
|                                                                             |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //



ddtSchemes
{
    default         steadyState;
}

gradSchemes
{
    default         leastSquares; //Gauss linear;
}

divSchemes
{
    default         none;


// convection terms for resolved velocity
// apparently DEShybrid discretisation doesnt work for buoyantPimpleFoam


/*
    div(phi,U)      Gauss DEShybrid
        linear                    // scheme 1
        linearUpwind grad(U)      // scheme 2
        hmax
        0.65                      // DES coefficient, typically = 0.65
        1                         // Reference velocity scale
        1                         // Reference length scale
        0                         // Minimum sigma limit (0-1)
        1                         // Maximum sigma limit (0-1)
        1; // 1.0e-03;                  // Limiter of B function, typically 1e-03
*/


// since DES hybrid doesn't work, and i want to use IDDES like LES model, then 
// i'll go for Gauss linear here, if that doesn't converge, linear Upwind


    // div(phi,U)      bounded Gauss limitedLinear 0.2;


      div(phi,U)      Gauss linearUpwind grad(U);




// Energy Transport Equation
    div(phi,K)      Gauss limitedLinear 0.1; // bounded Gauss limitedLinear 0.2;
    div(phi,h)      Gauss limitedLinear 0.1; // bounded Gauss limitedLinear 0.2;


// k Omega SST Turbulence Mdoel
    // div(phi,k)      bounded Gauss limitedLinear 0.2;
    // div(phi,epsilon) bounded Gauss limitedLinear 0.2;
    // div(phi,omega) bounded Gauss limitedLinear 0.2;


// Spalart Allmaras Variable nuTilda
       div(phi,nuTilda) Gauss limitedLinear 0.1;

// Effective Viscosity Term (turbulent viscosity + molecular viscosity)
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear orthogonal;
}

interpolationSchemes
{
    default         linear;
}

snGradSchemes
{
    default         orthogonal;
}

wallDist
{
    method 	meshWave;
    //nRequired	yes;
}



// ************************************************************************* //
