/*--------------------------------*- C++ -*----------------------------------*\
|                                                                             |
|                Generated by the CfdOF workbench for FreeCAD                 |
|                      https://github.com/jaheyns/CfdOF                       |
|                                                                             |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     buoyantSimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

deltaT          1;

endTime         100000;

writeControl    timeStep;

writeInterval   1000;

purgeWrite      0;

writeFormat     ascii;

writePrecision  15;

runTimeModifiable true;

libs
(
    // Needed for availability of porous baffle boundary in potentialFoam
    #include "turbulenceLib"
);

functions
{
    fieldAverage1
    {
        type            fieldAverage;
        functionObjectLibs ("libfieldFunctionObjects.so");
        enabled         true;
        outputControl   outputTime;
        outputInterval  1;
        fields
        (
            T
            {
                mean        on;
            }
        );
    }

    cuttingPlane1
    {
        type            surfaces;
        functionObjectLibs ("libsampling.so");
        outputControl   outputTime;
        outputInterval  1;

        interpolationScheme cellPoint;

        surfaces
        (
            horizontalPlane1
            {
                type        cuttingPlane;
                planeType   pointAndNormal;
                pointAndNormalDict
                {
                    basePoint   (0 0 0.1);  // Example height, adjust as needed
                    normalVector (0 0 1);
                }
                interpolate true;
            }
            // Add more planes as needed
        );
        fields          (TMean);  // Assumes you're averaging T and outputting TMean
    }
}


// ************************************************************************* //
